name: Compiler Linux Kernel
on:
  workflow_dispatch:
    inputs:
      KERNEL_VERSION:
        required: true
        description: "CHOSE OUR KERNEL VERSION:"
        type: choice
        default: latest
        options:
          - latest
          - 6.9-rc5
          - 6.8.7
          - 6.7.12
          - 6.6.28
          - 6.1.87
          - 5.15.156
          - 5.10.215
          - 5.4.274
          - 4.19.312
    
jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        defconfig: [tinyconfig]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Delete failed workflow runs
        run: |
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/actions/runs \
               | jq -r '.workflow_runs[] | select(.conclusion == "failure") | .id' \
               | xargs -I {} curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/repos/${{ github.repository }}/actions/runs/{}
             
      - name: Install Dependencies
        run: |
          sudo apt update
          sudo apt install -y gcc make build-essential libncurses-dev wget curl tar bison flex libssl-dev grep sed libelf1
          
      - name: Download and extract latest kernel
        id: download_kernel
        run: |
          if [ ${{ github.event.inputs.KERNEL_VERSION }} == "latest" ];then
            latest_version=$(curl -s https://www.kernel.org/finger_banner | grep -m1 "$1" | sed -r 's/^.+: +([^ ]+)( .+)?$/\1/')
          else
            latest_version=${{ github.event.inputs.KERNEL_VERSION }}
          fi
          if [ ! -f linux-${latest_version}.tar.xz ];then
            wget https://cdn.kernel.org/pub/linux/kernel/v${latest_version:0:1}.x/linux-${latest_version}.tar.xz
          fi
          if [ ! -d linux-${latest_version} ];then
            tar -xvf linux-${latest_version}.tar.xz
          fi
          echo "LATEST_VERSION=${latest_version}" >> $GITHUB_ENV
          echo done! linux-${latest_version}
          
      #- name: Cache ccache
      #  uses: actions/cache@v2
      #  with:
      #    path: ~/.ccache
      #    key: ${{ matrix.defconfig }}

            
      - name: Building Kernel ${{ github.event.inputs.KERNEL_VERSION }}
        run: |
            echo linux-${{ env.LATEST_VERSION }}
            ls
            cd linux-${{ env.LATEST_VERSION }}
            export CFLAGS="-march=silvermont -mtune=silvermont -m3dnow -m3dnowa -mfpmath=sse -Os"
            export CXXFLAGS="-march=silvermont -mtune=silvermont -m3dnow -m3dnowa -mfpmath=sse -Os"
            # Build only minimal debug info to reduce size
            CFLAGS+=' -g1'
            CXXFLAGS+=' -g1'
            make ${{ matrix.defconfig }}
            make -j$(nproc)
    
      - name: Upload Kernel ${{ github.event.inputs.KERNEL_VERSION }} Linux Artifacts
        uses: actions/upload-artifact@v4.3.2
        with:
          name: Kernel Linux ${{ github.event.inputs.KERNEL_VERSION }} Image
          path: linux-${{ env.LATEST_VERSION }}/arch/x86/boot/bzImage
